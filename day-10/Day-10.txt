# kubectl get ns
# kubectl get all -n kube-system => This will contains all important K8s components here.
# vim ns.yml
=================================
apiVersion: v1
kind: Namespace
metadata:
  name: demo
=================================
# kubectl apply -f ns.yml
# kubectl get ns
# kubectl delete ns/demo
# kubectl create ns demo
# kubectl get ns

====================================================================
========= Access apps in Pod between different namespaces ==========
====================================================================

========= In demo namespace ===========
# kubectl create deployment nginx-demo --image=nginx -n demo
# kubectl get deployments -n demo
# kubectl get pods -n demo
# kubectl get pods -n demo -o wide => Pod IP: 10.244.2.3

========= In default namespace ===========
# kubectl create deployment nginx-test --image=nginx
# kubectl get deployments
# kubectl get pods
# kubectl get pods -o wide => Pod IP: 10.244.1.3

========= In demo namespace ===========
# kubectl exec -it -n demo <pod-name> -- bash
<pod># curl 10.244.1.3 => Able to access web page hosted in Pod in "default" namespace from pod in "demo" namespace.

========= In default namespace ===========
# kubectl exec -it <pod-name> -- bash
<pod># curl 10.244.2.3 => Able to access web page hosted in Pod in "demo" namespace from pod in "default" namespace.


================================================================
========= Access service between different namespaces ==========
================================================================

========= In demo namespace ===========
# kubectl scale -n demo deployment/nginx-demo --replicas=3
# kubectl get pods -n demo -o wide
# kubectl expose deployment/nginx-demo --name=svc-demo --port 80 -n demo
# kubectl get svc -n demo => svc-demo

========= In default namespace ===========
# kubectl scale deployment/nginx-test --replicas=3
# kubectl get pods -o wide
# kubectl expose deployment/nginx-test --name=svc-test --port 80
# kubectl get svc => svc-test

========= In demo namespace ===========
# kubectl exec -it -n demo <pod-name> -- bash
<pod># curl svc-test => Error: curl: (6) Could not resolve host: svc-test
<pod># cat /etc/resolv.conf => search demo.svc.cluster.local svc.cluster.local cluster.local

========= In default namespace ===========
# kubectl exec -it <pod-name> -- bash
<pod># curl svc-demo => Error: curl: (6) Could not resolve host: svc-demo
<pod># cat /etc/resolv.conf => search default.svc.cluster.local svc.cluster.local cluster.local

Resolution:
========= In demo namespace ===========
# <pod># curl svc-test.default.svc.cluster.local ==> App in "default" namespace is accessible now from pod in "demo" namespace. We used FQDN here.

========= In default namespace ===========
# <pod># curl svc-demo.demo.svc.cluster.local ==> App in "demo" namespace is accessible now from pod in "default" namespace. We used FQDN here.

